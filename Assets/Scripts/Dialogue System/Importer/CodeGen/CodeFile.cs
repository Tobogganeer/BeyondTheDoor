using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Text;
using System.IO;

namespace ToBOE.Dialogue.Importer.CodeGen
{
    public class CodeFile
    {
        const int AutoGenPreambleMinLength = 50;
        const int AutoGenPreambleNameSpacing = 8;

        public string FileName { get; private set; }
        public string FolderPath { get; private set; }
        public string FullPath { get; private set; }
        
        public uint IndentLevel { get; private set; }

        private StringBuilder builder;

        public CodeFile(string fileName, string relativeFolderPath)
        {
            FileName = fileName.ToLower().EndsWith(".cs") ? fileName : fileName + ".cs";
            FolderPath = Path.Combine(Application.dataPath, relativeFolderPath);
            FullPath = Path.Combine(FolderPath, FileName);

            IndentLevel = 0;
            builder = new StringBuilder();
        }

        public void AddUsingDirective(string _namespace)
        {
            builder.Append("using ").AppendLine(_namespace);
        }

        public void AddAutoGeneratedPreamble()
        {
            // Ensure we have enough space
            int lineLength = Mathf.Min(AutoGenPreambleMinLength, FileName.Length + AutoGenPreambleNameSpacing);

            builder.Append("//").Append('=', lineLength); // Top row
            builder.AppendLine();
            AppendPreambleLine(builder, lineLength, ""); // Empty spacer line
            AppendPreambleLine(builder, lineLength, FileName);
            AppendPreambleLine(builder, lineLength, ""); // Spacer
            AppendPreambleLine(builder, lineLength, "AUTO-GENERATED FILE - Do not edit!");
            AppendPreambleLine(builder, lineLength, ""); // Spacer
            builder.Append("//").Append('=', lineLength); // Bottom row
            builder.AppendLine().AppendLine(); // Trailing newlines

            static void AppendPreambleLine(StringBuilder builder, int lineLength, string text)
            {
                builder.Append("// = ").Append(text);

                int textLength = text.Length;
                textLength += 2; // Beginning space and =
                int spaces = lineLength - textLength;
                spaces--; // End =

                builder.Append(' ', spaces).Append('=');
                builder.AppendLine();
            }
        }
    }
}
