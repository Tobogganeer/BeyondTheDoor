using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Text;
using System.IO;
using System;

namespace ToBOE.Dialogue.Importer.CodeGen
{
    public class CodeFile
    {
        const int AutoGenPreambleMinLength = 50;
        const int AutoGenPreambleNameSpacing = 8;

        public string FileName { get; private set; }
        public string FolderPath { get; private set; }
        public string FullPath { get; private set; }
        
        public int IndentLevel { get; private set; }

        private StringBuilder builder;

        public CodeFile(string fileName, string relativeFolderPath)
        {
            FileName = fileName.ToLower().EndsWith(".cs") ? fileName : fileName + ".cs";
            FolderPath = Path.Combine(Application.dataPath, relativeFolderPath);
            FullPath = Path.Combine(FolderPath, FileName);

            IndentLevel = 0;
            builder = new StringBuilder();
        }

        public void AddUsingDirective(string _namespace)
        {
            builder.Append("using ").AppendLine(_namespace);
        }

        public void AddAutoGeneratedPreamble()
        {
            // Ensure we have enough space
            int lineLength = Mathf.Min(AutoGenPreambleMinLength, FileName.Length + AutoGenPreambleNameSpacing);

            builder.Append("//").Append('=', lineLength); // Top row
            builder.AppendLine();
            AppendPreambleLine(builder, lineLength, ""); // Empty spacer line
            AppendPreambleLine(builder, lineLength, FileName);
            AppendPreambleLine(builder, lineLength, ""); // Spacer
            AppendPreambleLine(builder, lineLength, "AUTO-GENERATED FILE - Do not edit!");
            AppendPreambleLine(builder, lineLength, ""); // Spacer
            builder.Append("//").Append('=', lineLength); // Bottom row
            builder.AppendLine().AppendLine(); // Trailing newlines

            static void AppendPreambleLine(StringBuilder builder, int lineLength, string text)
            {
                builder.Append("// = ").Append(text);

                int textLength = text.Length;
                textLength += 2; // Beginning space and =
                int spaces = lineLength - textLength;
                spaces--; // End =

                builder.Append(' ', spaces).Append('=');
                builder.AppendLine();
            }
        }

        private StringBuilder ApplyIndent()
        {
            return builder.Append('\t', IndentLevel);
        }

        private void IncreaseIndent(int increase = 1) => IndentLevel = Mathf.Max(IndentLevel + increase, 0);
        private void DecreaseIndent(int decrease = 1) => IndentLevel = Mathf.Max(IndentLevel - decrease, 0);

        public void AddComment(string comment)
        {
            ApplyIndent().Append("// ").AppendLine(comment);
        }

        public void Space()
        {
            builder.AppendLine();
        }

        public void Space(int numSpaces)
        {
            for (int i = 0; i < numSpaces; i++)
                builder.AppendLine();
        }

        public StringBuilder AddModifiers(Modifiers mods)
        {
            if (mods.HasFlag(Modifiers.None)) return builder;
            if (mods.HasFlag(Modifiers.Private)) builder.Append("private ");
            if (mods.HasFlag(Modifiers.Public)) builder.Append("public ");
            if (mods.HasFlag(Modifiers.Protected)) builder.Append("protected ");
            if (mods.HasFlag(Modifiers.Static)) builder.Append("static ");
            if (mods.HasFlag(Modifiers.Virtual)) builder.Append("virtual ");
            if (mods.HasFlag(Modifiers.Abstract)) builder.Append("abstract ");

            return builder;
        }




        [Flags]
        public enum Modifiers
        {
            None = 0,
            Private = 1 << 0,
            Public = 1 << 1,
            Protected = 1 << 2,
            Static = 1 << 3,
            Virtual = 1 << 4,
            Abstract = 1 << 5,
            
        }

        public class Scope : IDisposable
        {
            private bool isDisposed;

            public Scope(CodeFile codeFile)
            {
                codeFile.builder.AppendLine();
                codeFile.ApplyIndent().AppendLine("{");
                codeFile.IncreaseIndent();
            }

            protected virtual void Dispose(bool disposing)
            {
                if (!isDisposed)
                {
                    if (disposing)
                    {
                        //codeFile.builder.AppendLine();
                    }

                    isDisposed = true;
                }
            }

            public void Dispose()
            {
                // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
                Dispose(disposing: true);
                GC.SuppressFinalize(this);
            }
        }
    }
}
