using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

namespace BeyondTheDoor.Importer.CodeGen
{
    public static class CharacterGenerator
    {
#if UNITY_EDITOR
        [UnityEditor.MenuItem("Dialogue/Generate Current Characters")]
        public static void GenerateAll()
        {
            GenerateCharactersFile((CharacterID[])Enum.GetValues(typeof(CharacterID)));
        }
#endif

    /// <summary>
    /// Saves all of the <paramref name="characters"/> to disk.
    /// </summary>
    /// <param name="characters"></param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <exception cref="ArgumentException"></exception>
    public static void GenerateCharactersFile(CharacterID[] characters)
        {
            if (characters == null)
                throw new ArgumentNullException(nameof(characters));

            CodeFile cf = new CodeFile(nameof(Character) + ".Autogenerated", FilePaths.Autogenerated);

            cf.AddAutoGeneratedPreamble();

            // Dictionary for Characters dict
            cf.AddUsingDirective("System.Collections.Generic");
            cf.Space();

            using (cf.Namespace(FilePaths.DialogueNamespace))
            {
                using (cf.Class(CodeFile.Modifiers.Public | CodeFile.Modifiers.Partial, nameof(Character)))
                {
                    foreach (var charID in characters)
                    {
                        GenerateCharacterLine(charID, cf);
                    }

                    GenerateAllCharactersDict(characters, cf);
                }
            }

            cf.SaveToDisk();
        }

        static void GenerateCharacterLine(CharacterID charID, CodeFile cf)
        {
            System.Text.StringBuilder sb = cf.GetStringBuilder();

            // CharacterID character
            cf.ApplyIndent();
            sb.Append("public static Character ").Append(charID).Append(" { get; private set; } = new Character(");
            sb.Append(nameof(CharacterID)).Append(".").Append(charID).Append(");");
            sb.AppendLine();
        }

        static string SanitizeForCodeGen(string textInput)
        {
            if (string.IsNullOrEmpty(textInput))
                return null;

            // Get rid of wrapping quotes, but not ones in middle
            if (textInput.StartsWith('"') && textInput.EndsWith('"'))
                textInput = textInput.Substring(1, textInput.Length - 2);

            return textInput.Replace("\"", "\\\"");
        }

        static void GenerateAllCharactersDict(CharacterID[] characters, CodeFile cf)
        {
            GenerateCharactersDict(cf, "All", characters, "All characters in the game.");
        }

        static void GenerateCharactersDict(CodeFile cf, string dictName, CharacterID[] characters, string xmlComment = null)
        {
            System.Text.StringBuilder sb = cf.GetStringBuilder();

            cf.Space();
            if (xmlComment != null)
            {
                cf.ApplyIndent().AppendLine("/// <summary>");
                cf.ApplyIndent().Append("/// ").AppendLine(xmlComment);
                cf.ApplyIndent().AppendLine("/// <summary>");
            }
            cf.ApplyIndent();
            sb.Append("public static Dictionary<CharacterID, Character> ").Append(dictName).Append(" { get; private set; } = new Dictionary<CharacterID, Character>()");
            using (new CodeFile.Scope(cf, true))
            {
                foreach (var charID in characters)
                {
                    cf.ApplyIndent();
                    sb.Append("{ CharacterID.").Append(charID).Append(", ").Append(charID).AppendLine(" },");
                }
            }
        }



        /// <summary>
        /// Removes all characters from the Character.Autogenerated file. Useful if enums are being regenerated.
        /// </summary>
        public static void ClearCharactersFile()
        {
            CodeFile cf = new CodeFile(nameof(Character) + ".Autogenerated", FilePaths.Autogenerated);
            cf.AddAutoGeneratedPreamble();

            cf.AddComment("This file was intentionally cleared by the code generator.");

            cf.SaveToDisk();
        }
    }
}
